<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CHENENE</title>
    <link>https://cheene.github.io/posts/</link>
    <description>Recent content in Posts on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <lastBuildDate>Tue, 12 May 2020 20:28:04 +0800</lastBuildDate>
    
	<atom:link href="https://cheene.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL初始</title>
      <link>https://cheene.github.io/posts/mysqlbzbh-00/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlbzbh-00/</guid>
      <description>第一章 初始 1 数据库是什么? 数据库是一种容器，能够进行存储信息
那么类似于 MySQL 这样的不属于数据库，而是叫做DBMS，数据库管理软件。
表是什么？ 某种特定类型的结构化清单
 他是一个清单 其次该清单是天然持有携带格式的属性 单个清单的格式是特定的  模式（schema） 表示数据库与表的布局以及特性的信息
表中的行，列与数据类型  表中的每一行代表着一条记录 (row) 每一列代表着一个属性(column) 每一列有着具体的数据类型  表中的主键 主键是一列或一组列，其每行的记录用来作为唯一标识区别于其他的行
三个习惯
 不更新主键列中的值 不重用主键列的值 不在主键列中使用可能会改变的值  </description>
    </item>
    
    <item>
      <title>第二章：协议栈与网卡</title>
      <link>https://cheene.github.io/posts/how-computer-network-02/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-02/</guid>
      <description>第二章：协议栈与网卡 2.1 创建套接字   协议栈的内部结构由上到下
  应用程序(网络应用程序 Socket )；
  操作系统 协议栈 TCP、UDP、IP(ICMP,ARP))驱动程序(网卡驱动程序等)；
  硬件(网卡)
    一般收发时间比较短的用的是UDP连接比如DNS查询，视频流；需要稳定的是TCP来传输，比如邮件服务，web访问。
  IP 是用来控制网络包的收发状态，数据会切成一个一个的包。
 ICMP告知传输过程中产生的错误以及控制信息 ARP 用来根据IP地址获取对应的 MAC 地址    套接字： 通信的控制信息，比如在 windows 系统的 netstat -ano</description>
    </item>
    
    <item>
      <title>第一章 HTTP消息、DNS服务与协议栈消息发送</title>
      <link>https://cheene.github.io/posts/how-computer-network-01/</link>
      <pubDate>Mon, 11 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-01/</guid>
      <description>前言 网络是怎样连接的，来自于日本的一位作者，本书主要以web交互，从客户端访问服务器以及服务器应答的过程来讲解的。接下来一段时间将以书本上涉及知识的总结以供后期自行查阅。
网络连接的流程：
 浏览器委托数据的发送，传递消息的是搬运数字(消息对应着就是数据，数据是0和1组成的); 协议栈：给消息打包，添加地址等接着交给网卡最后通过电信号转发出去; 通过交换机到达路由器，路由器的后面就是互联网部分，接下来属于网络运营商所需要解决的; 由接入网到接入点(接入点后面是互联网的骨干部分) 到达web服务器大体需要经过  web 服务器所在的局域网 防火墙 缓存服务 WEB服务    1关于HTTP 1.1 HTTP 消息 ① 关于访问web服务器格式：用户名\密码\服务器域名\端口号\文件路径名；
② 端口是识别服务器中要连接服务的编号,即我与那个程序进行连接；
③ 省略默认文件很多比如 index.html 等；
④ 因为不能产生同名的文件/目录，所以在浏览的时候如果没有扩展名默认的先按目录来处理，目录找不到就按文件来查找，文件也查找不到就返回 404；
⑤ 基本思路
 客户端发送请求消息(URL 和 方法)到服务器; 服务器返回状态码到客户端  ⑥ 在消息体中，URL是域名的部分，方法是 post、get、delete、head、trace 等；</description>
    </item>
    
    <item>
      <title>Git基础</title>
      <link>https://cheene.github.io/posts/git/</link>
      <pubDate>Sun, 10 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/git/</guid>
      <description>Git 一 开始了解 Git 服务器并不是为了存储数据使用，而是为了方便大家来交换修改而设定。
1 Git 如何保证完整性？ 通过计算校验和利用 SHA-1
2 Git 三种状态  staged 已暂存：已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 modified 已修改：修改了文件，但还没有保存在数据库中。 committed 已提交： 数据已安全的保存在数据库里面。  3 Git 三个工作区  Git 仓库 工作目录 暂存区域  4 Git 工作三步曲  在工作目录里面修改文件 暂存文件，将文件的快照放入暂存区域 提交更新，从暂存区域存储到Git仓库目录  二 基础 1 初始化一个空白仓库 git init	// 新建仓库 git add file.</description>
    </item>
    
  </channel>
</rss>