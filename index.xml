<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CHENENE</title>
    <link>https://cheene.github.io/</link>
    <description>Recent content on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <lastBuildDate>Tue, 23 Jun 2020 09:06:36 +0800</lastBuildDate>
    
	<atom:link href="https://cheene.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 文件操作</title>
      <link>https://cheene.github.io/posts/go-instru-01/</link>
      <pubDate>Tue, 23 Jun 2020 09:06:36 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/go-instru-01/</guid>
      <description>文件操作 打开文件
file,err := os.Open(filename) 按行读取
input := bufio.NewScanner(file for input.Scan() { // 相关处理 } 一次全部读取
通过 readFile 一次把文件的所有内容传递到内存中，并通过 Split 进行切割
//读数据到内存 data,err := ioutil.ReadFile(filename) //读取出错处理 if err != nil { fmt.Fprintf(os.Stderr,&amp;#34;dup3:#%v\n&amp;#34;,err) continue } //通过 Split 进行切割 for _,line := range strings.</description>
    </item>
    
    <item>
      <title>Web攻击技术</title>
      <link>https://cheene.github.io/posts/http-image-10/</link>
      <pubDate>Mon, 22 Jun 2020 20:10:02 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-10/</guid>
      <description>作为HTTP，开发者需要自行设计并开发认证及会话管理功能来满足对WEB应用安全的需要
  攻击者可以通过在客户端修改需求来获取数据库信息
  针对WEB应用的攻击模式
 主动攻击  通过WEB请求，把攻击代码传入的方式。 主要是希望能够获取到相应的资源。 SQL注入与OS命令注入两种方式   被动攻击  圈套策略执行攻击代码，不会直接对目标WEB应用访问泛起攻击 常见步骤：  诱惑用户触发已设置好的陷阱 用户中招后，用户的浏览器或邮件客户端会出触发这个陷阱 用户间接把攻击代码通过HTTP请求发送到作为攻击目标的WEB应用 服务器执行攻击代码后，存在安全漏洞的WEB应用会成为攻击者的跳板，导致用户所持的Cookie等个人信息被窃取   代表性：跨站脚本攻击与跨站点请求伪造      因输出值转移不完全引发的安全漏洞
即在web页面输入时候，能够进行恶意代码的执行
  XSS ，Cross-Site Scrioting, 跨站脚本攻击</description>
    </item>
    
    <item>
      <title>Http 之面向未来</title>
      <link>https://cheene.github.io/posts/http-image-09/</link>
      <pubDate>Mon, 22 Jun 2020 19:45:02 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-09/</guid>
      <description>SPDY ,执意要消除HTTP的瓶颈  主要用于缩短Web页面的加载时间 会有什么样的瓶颈？  客户端想要更新网站内容的时候，需要发送请求到服务器 在服务器中，无论是否有新的信息，都会把所有的信息重新发送   Ajax 解决办法 Asynchronous JavaScript and XML  局部Web页面替换加载的异步通信手段 他只更新一小部分页面，响应中传输的数据量会减少 核心为 XMLHttpRequest 的API 每次与服务器通信后，仅仅更新部分页面 但，可能导致的问题是，存在大量的请求   Comet 的解决办法  借助延迟应答，模拟实现服务器向客户端推送的功能 Comet会先将响应置于挂起状态，等待服务器有新的内容更新时，再次向客户端响应 内容可以实时更新，但一次连接的持续时间变长      SPDY 的设计  在协议级别消除HTTP所遭遇的瓶颈 协议的设计是在应用层和传输层之间的会话层上增加协议  HTTP	应用层 SPDY 会话层 SSL 表示层 TCP 传输层   优势：  多路复用，多个HTTP请求通过单个TCP连接完成 请求存在优先级 可以压缩HTTP首部 存在推送功能 服务器也可以主动推送功能   缺陷:  web本身的速度仍没有提升      Web Socket 浏览器也能进行全双工通信</description>
    </item>
    
    <item>
      <title>Http如何确认用户身份的认证</title>
      <link>https://cheene.github.io/posts/http-image-08/</link>
      <pubDate>Mon, 22 Jun 2020 19:44:58 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-08/</guid>
      <description>1 什么叫做认证 确定你是合法的身份
 密码 动态令牌 数字证书 生物认证 IC卡等  2 HTTP/1.1 的认证方式  BASIC DIGEST SSL 客户端认证 FormBase 基于表单认证 &amp;hellip;..  3 BASIC 认证 过程：
 客户端发送请求  服务器反馈 401并带回 WWW-Authenticate 首部字段的响应   接收到状态码401的客户端，将以 用户ID:密码 的方式构成，通过Base64 编码发送给服务器 服务器将会收到来自客户端的请求，其中首部字段包含着Authorization  在验证通过后，返回包含 Request-URI 资源的响应    缺陷：</description>
    </item>
    
    <item>
      <title>HTTP首部有哪些？</title>
      <link>https://cheene.github.io/posts/http-image-06/</link>
      <pubDate>Mon, 22 Jun 2020 19:44:50 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-06/</guid>
      <description>1 HTTP首部有哪些分类呢？  通用首部字段 General Header Fields 请求首部字段 Request Headers Fields 响应首部字段 Response Header Fields 实体首部字段 Entity Header Fields Cookie 相关字段  2 两大报文首部有哪些  请求报文  报文首部  请求行 请求首部字段 通用首部字段 实体首部字段 其他   空行 CR+LF 报文主体   响应报文  报文首部  状态行 响应首部字段 通用首部字段 实体首部字段   空行 CR+LF 报文主体    3 各个字段的详情 通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 逐跳首部、连接的管理   Date 创建报文的日期时间   Pragma 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 代理可处理的媒体类型   Accept-Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的自然语言   Authorization Web认证信息   Expert 期待服务器特定的行为   From 电子邮箱地址   Host 请求的资源服务器   If-Match 比较实体标记   If-Modified-Since 比较资源更新时间   If-None-Match 比较实体标记   if-Range 资源未更新时发送实体Byte的范围请求   If-Unmodified-Since 比较资源的更新时间   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体的字节范围请求   Referer 对请求中URI的原始获取方   TE 传输编码的优先级   User-Agent HTTP客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Range 是否接收字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配的信息   Location 令客户端重定向到指定URI   Proxy-Authenticate 代理服务器对客户端的认证信息   Retry-After 对再次发起的请求的时机要求   Server HTTP服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源可支持的HTTP办法   Content-Encoding 实体主体的可接收编码方法   Content-Language 自然语言   C-Length 大小（字节）   C-Location 代替对应资源的URI   C-MD5 报文摘要   C-Range 位置范围   Type 媒体类型   Expires 过期的日期时间   Last-Modified 最后修改日期    4 缓存代理的分类  端到端首部 End-to-end Header  会转发到最终目标 必须保存在由缓存生成的响应中 必须被转发   逐跳首部 Hop-by-hop Header  首部单词转发有效 可以通过代理而不再转发 需要提供 Connection 首部字段  Connection Keep-Alive Proxy-Authenticate Proxy-Authorization Trailer TE Transfer-Encoding Upgrade      5 缓存相关 请求</description>
    </item>
    
    <item>
      <title>Web服务器的相关信息</title>
      <link>https://cheene.github.io/posts/http-image-05/</link>
      <pubDate>Mon, 22 Jun 2020 19:44:45 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-05/</guid>
      <description>Web服务器 1 单台虚拟主机的多个域名 一个虚拟主机可以同时搭载多个WEB服务
在HTTP请求的时候，会将域名转换成DNS，那么返回的是IP地址
在同一个主机上，搭载多个WEB服务，而IP地址相同又该如何区分？
 此时必须在 Host 首部内完整指定主机名或域名的URI  2 数据转发三剑客 在客户端和服务端之间往往还有帮忙转发的其他应用程序
 代理 ,中间人 网关，跨网传输 隧道，加强安全  2.1 代理 任务 接收客户端的请求，并转发到源服务器
联动 可多级联动，每次转发也保存 Via 首部信息
两种代理
 缓存代理  预先将资源的副本保存在代理服务器上   透明代理  不需要对报文做任何的加工而是透明的传输    2.</description>
    </item>
    
    <item>
      <title>HTTP协议简述</title>
      <link>https://cheene.github.io/posts/http-image-02/</link>
      <pubDate>Mon, 22 Jun 2020 19:43:44 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-02/</guid>
      <description>HTTP协议简述 1 协议用在哪里？ 客户端和服务端之间的通信
2 数据如何交换？ 请求和响应
 请求：即由客户端发出 响应：即由服务端发出  服务端不会主动建立连接，而是一直在监听客户端的连接请求
请求体
方法	URL	协议版本 GET /index.html HTTP/1.1 请求首部字段 Host:... Connection: Content-Type: Content-Length: xx 内容实体 name=??&amp;amp;&amp;amp;xx=yy 响应请求
版本号	状态码 原因短语 HTTP/1.1	200 OK 首部字段 Date: Tue,10,xxxxx Content-Length: 12 Content-Type: text/html 资源实体 entity body &amp;lt;html&amp;gt; .</description>
    </item>
    
    <item>
      <title>图解HTTP 开篇</title>
      <link>https://cheene.github.io/posts/http-image-01/</link>
      <pubDate>Sun, 21 Jun 2020 19:43:44 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/http-image-01/</guid>
      <description>HTTP 零 状态码    状态码 标识 解释     101 Switching Protocols    200 OK    204 No Content 无返回数据，即不包含实体部分   206 part content 部分内容更新   304 Not Modified    301 Moved Permanently 永久重定向，资源已重新分配URI；会重新请求   302 Found 临时重定向，临时分配新的URI；会重新请求   303 See Other 需要重新请求，并且使用GET   304 Not Modified 允许访问资源，但给的附件条件不满足资源   307 Temporary Redirect 临时重定向，不会二次请求，与302相比   400 Bad Request 服务器没有看懂请求什么意思   401 Unauthorized 认证失败，再来一次吧 {www-Authenricate}   403 Forbidden 资源禁止访问    Precondition Failed IF-Match 匹配失败   404 Not Found 资源找不到   501 Internal Server Error 内部出了故障   503 Service Unavailable 资源处理的队列排满了或在停机维护Retry Afteer    Gateway Timeout     前言 1 网络分层机制 网络的分层，能够对各个部分进行封装。在进行修改时候，不需要全部替换而仅是需要替换部分。</description>
    </item>
    
    <item>
      <title>MySql一条更新语句是如何执行的？</title>
      <link>https://cheene.github.io/posts/mysqlsz-01/</link>
      <pubDate>Sun, 21 Jun 2020 14:01:55 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlsz-01/</guid>
      <description>大体过程：
首先，是连接器与客户端相连，进而通过分析器，进行词法与语法的分析；
其次，分析器在语法分析的时候，确定是一条更新语句后，转送给优化器
再次，优化器决定使用ID这个索引，推送给执行器
最后，执行器复责具体的执行
两大日志模块：
  redo log
  借助WAL技术，即 Write-Ahead Logging, 先些日志到内存，在不忙的时候写进硬盘
  InnoDB的redo log 是固定大小的，比如配置一组4个文件，每个文件的大小是1GB；
 从头开始写，写到末尾再从头开始写  write pos 是当前记录的位置，一边写一遍后移
check point 是当前要擦除的位置，即要把数据更新到数据文件
  innodb_flush_log_at_trx_commit = 1
    bin log - 归档日志</description>
    </item>
    
    <item>
      <title>Mysql本地数据恢复--在没有密码的情况下</title>
      <link>https://cheene.github.io/posts/mysql-recover-byfrm/</link>
      <pubDate>Thu, 18 Jun 2020 22:31:51 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysql-recover-byfrm/</guid>
      <description>  删除源表
  借助MySQL Utilities查询表的结构并创建表
mysqlfrm --diagnostic ./文件目录/t1.frm   表空间卸载卸载
alter table t1 discard tablespace;   重新拷贝原 idb
  对表进行空间装载
   alter table t1 import tablespace; </description>
    </item>
    
    <item>
      <title>从浏览器请求到WEB服务器响应返回浏览器</title>
      <link>https://cheene.github.io/posts/how-computer-network-06/</link>
      <pubDate>Thu, 18 Jun 2020 22:29:24 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-06/</guid>
      <description>当我们在浏览器输入网址，按下回车后，会打开新的网页，而这一过程发生了什么？
WEB服务器接收数据和返回响应的内容主要是四个方面：
 服务器是什么？ 服务器如何进行接收操作？ 服务器里的解释程序是如何运行的？ 返回到客户端是如何显示在浏览器里的？  服务器的概览   客户端与服务器的区别
 操作系统和硬件与客户端不相同 网络相关的部分比如网卡，协议栈，Socket库是相同的； 在连接的时候，客户端是请求连接，服务器是等待连接。    服务器程序的结构
 正常情况下，服务端由两个模块组成  等待连接的模块 与客户端通讯的模块   运行过程：  服务端系统在初始化后执行等待模块程序并且进入等待状态 当有客户端连接的时候，由等待状态变为运行状态并且生成一个新的客户端通信模块 让新连接的客户端能够一对一连接到服务端的套接字上      客户端与服务端的区分
因为从数据的收发操作是无法区分是服务端还是客户端的
所以是通过连接时候等待连接与请求连接来区分的。</description>
    </item>
    
    <item>
      <title>服务端局域网有什么玄机</title>
      <link>https://cheene.github.io/posts/how-computer-network-05/</link>
      <pubDate>Wed, 17 Jun 2020 19:58:06 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-05/</guid>
      <description>本章主要是与部署网站比较接近的地方，我也是第一次接触到防火墙，缓存服务器和负载均衡器的实现原理，在之前只是听说有这个名词。
5.1 WEB服务的部署地点 常见的WEB部署的方式有三种：
 和路由器直接的方式，此时服务器在互联网上是处于“裸露”的状态而且IP地址也不足； 通过防火墙的连接，防火墙会先对包进行检查，只转发允许的包； 部署在接入网的数据中心，因为比较接近POP或者IX 所以速度高，安全并且维护成本也低。  5.2 防火墙结构和原理   基本思路 : 只允许发往特定服务器上特定程序的包，其余都屏蔽。
  常见实现方式：
 包过滤 应用网关 电路层网关    对于包过滤是通过检测报的头部信息来实现的，字段包括：
 MAC头部的发送方MAC地址； IP头部的发送/接收IP，协议号； TCP/UDP头部 : 发送方/接收方的端口号； TCP 控制位(ACK,SYN，PSH，RST。FIN等)    端口限定应用程序。比如说在服务端仅仅是 80 或者8080 端口的可以进入，其余的都必须屏蔽；</description>
    </item>
    
    <item>
      <title>接入网与运营商</title>
      <link>https://cheene.github.io/posts/how-computer-network-04/</link>
      <pubDate>Wed, 17 Jun 2020 08:19:18 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-04/</guid>
      <description>接入网与运营商 4.1 ADSL 接入网的结构和工作方式   互联网也是通过路由器进行转发包的，不同的地方在于转发的距离以及如何控制转发目标，因为路由表记录的维护方式不同。
  互联网发包的规则与接入网有关，接入网就是公司家庭等连接互联网的通信线路包括 ADSL、FTFH、CATV、电话线、ISDN等。
  ADSL Modem 需要将数据拆成信号单元
  最终的目的是转换成电信号发送给分离器；
  整体过程：客户端路由通过 Modem 和电话线发送网络包到ADSL的网络运营商；
  从客户端到互联网网络包的变化：
  客户端生成的网络包到接入网路由器包中有IP头部、MAC头部；
  路由器接收包去除IP包并添加PPP、PPPOE、MAC包;
  到达ADSL Modem接收包并且拆分成 ATM信号，将其转换成电信号发送出去；
  此时到网络运营商的DSLAM接收电信号并且还原成ATM信元；</description>
    </item>
    
    <item>
      <title>MySQL一条查询语句是如何执行的？</title>
      <link>https://cheene.github.io/posts/mysqlsz-00/</link>
      <pubDate>Sun, 14 Jun 2020 16:57:52 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlsz-00/</guid>
      <description>MySQL一条查询语句是如何执行的？ 首先要看到整个MySQL系统划分为哪一些部分？
  客户端
 各种发送请求    服务端
  Server层
 连接器 分析器 优化器 执行器    查询缓存(可能会逐步替代)
    引擎层
 各种存储引擎    执行的逻辑是什么？
 客户端向数据库发送请求 数据库收到请求后找到连接器，进行初步权限认证 分析器先进行词法和语法分析  词法分析，识别输入的是什么。比如表名？列名？关键字？ 语法分析，判断SQL语句是否符合语法   再执行优化器，优化主要在两个方面来体现  多个索引的时候，如何选择合适的索引 一个语句多表关联时如何处理   到达执行器，会进一步对语句做权限认证，同时根据存储引擎的定义来调用存储引擎的接口  查询缓存在哪里使用</description>
    </item>
    
    <item>
      <title>从网线到网络设备是如何工作的</title>
      <link>https://cheene.github.io/posts/how-computer-network-03/</link>
      <pubDate>Sun, 07 Jun 2020 15:39:55 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-03/</guid>
      <description>本章主要讲解的是电信号从 RJ-45 接口出来，到达集线器，交换机和路由器以及路由器往外转发的过程。在家庭的路由中，交换机和集线器一般集成在一起了或者直接没有集线器。
信号从网卡出来到集线器的时候   数据包之间的传输是独立的，仅仅负责传包并不会考虑内部的数据。
  从网卡到集线器的时候信号就会出现衰减，而且电信号频率越高，损失就越大。
  双绞线的存在是为了抑制噪声，减少衰减。 网线的周围的电磁波碰到金属等导体会产生电流，而信号本身就是带有电压变化的电流，混在一起容易导致失真。 电磁波有两种来源
 一种是外部的比如电机，荧光灯，CRT显示器等(让线变成螺旋状，使自身的电磁场变成螺旋状)； 一种是内部线之间出现泄露产生电磁波，称之为串扰。  抑制内部电磁波的方式是 让每一对信号线的扭交间隔产生差异。(正负信号的产生的噪声是相反的刚好抵消)。
  关于集线器：集线器的原理就是以太网的架构，数据传输的方式是靠着MAC地址寻找。
 集线器里有一个中继集成器，输入端口的信号转发给除了该端口之外的所有的端口。在这样的情况下如果所有的端口都发送信号，就会产生碰撞。 连接其他的端口叫做级联端口或者上行端口 根据相同的设备交叉连接，异种设备直连的原理，集线器里每一个端口都有一个 PHY/MAU 模块与其网卡上的模块没有什么区别，所以需要交叉连接。所谓的交叉连接就是发送方和接收方的交叉。 集线器中存在 MDI/MDI-X 切换开关。MDI 是直线连接，MDI-X是交叉连接。但现在的设备无所谓了，可以自适应。    交换机的包转发操作   交换机根据地址表进行转发 信号到达端口的时候由 PHY（MAU）来接收，然后传递给MAC模块，转换成数字信息并检验FCS确认无误后放在缓冲区中。 交换机端口本身没有MAC地址，实际过程中通过芯片同时控制多个端口 交换机电路的工作方式：</description>
    </item>
    
    <item>
      <title># 1616 [反转链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1616/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1616/</guid>
      <description>题目 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。示例 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL限制 0 &amp;lt;= 节点个数 &amp;lt;= 5000思路 指针类三个指针 pre cur next每次的反转next = cur.Nextcur.Next = prepre = curcur = next实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseList(head *ListNode) *ListNode { if head == nil || head.</description>
    </item>
    
    <item>
      <title>#1595 [数组中重复的数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1595/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1595/</guid>
      <description>题目 找出数组中重复的数字。在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。示例 输入：[2, 3, 1, 0, 2, 5, 3]输出：2 或 3 限制 2 &amp;lt;= n &amp;lt;= 100000思路 遍历数组到map中插入之后在查询其数量如果数量 &amp;gt; 1 就返回实现 func findRepeatNumber(nums []int) int { numMap := make(map[int]int,len(nums)) for _,num := range nums { numMap[num]++ if numMap[num] &amp;gt; 1 { return num } } return -1 } </description>
    </item>
    
    <item>
      <title>#1596 [二维数组中的查找]</title>
      <link>https://cheene.github.io/posts/leet-code-1596/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1596/</guid>
      <description>题目 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。示例 现有矩阵 matrix 如下：[[1, 4, 7, 11, 15],[2, 5, 8, 12, 19],[3, 6, 9, 16, 22],[10, 13, 14, 17, 24],[18, 21, 23, 26, 30]]给定 target = 5，返回 true。给定 target = 20，返回 false。限制 0 &amp;lt;= n &amp;lt;= 10000 &amp;lt;= m &amp;lt;= 1000思路 暴力破解实现 func findNumberIn2DArray(matrix [][]int, target int) bool { //边界条件  n := len(matrix) if n == 0 { return false } m := len(matrix[0]) if m == 0 { return false } //暴力破解  for i := 0; i &amp;lt; n; i++ { for j := 0; j &amp;lt; m; j++ { if matrix[i][j] == target { return true } } } return false } </description>
    </item>
    
    <item>
      <title>#1598 [从尾到头打印链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1598/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1598/</guid>
      <description>题目 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。示例 输入：head = [1,3,2]输出：[2,3,1]限制 0 &amp;lt;= 链表长度 &amp;lt;= 10000思路 核心在于不知道链表的元素的长度
如果使用栈的话，可以直接仅遍历一次，直接返回。
1 遍历链表到向量中再将向量的元素进行交换实现 func reversePrint(head *ListNode) []int { if head == nil { return []int{} } res := make([]int,0) for head != nil { res = append(res,head.</description>
    </item>
    
    <item>
      <title>#1603 [旋转数组的最小数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1603/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1603/</guid>
      <description>题目 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 示例 输入：[3,4,5,1,2]输出：1输入：[2,2,2,0,1]输出：0限制 思路 1 寻找第一个逆序对实现 func minArray(numbers []int) int { i := 0 j := len(numbers)-1 for i &amp;lt; j { mid := (i + j)/2 if numbers[mid] &amp;lt; numbers[j] { i = mid } else if numbers[mid] &amp;gt; numbers[j]{ j = mid + 1 } else { j -= 1 } } return numbers[i] } </description>
    </item>
    
    <item>
      <title>#1610 [打印从1到最大的n位数]</title>
      <link>https://cheene.github.io/posts/leet-code-1610/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1610/</guid>
      <description>题目 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。示例 输入: n = 1输出: [1,2,3,4,5,6,7,8,9]限制 思路 1 根据 n 得到最大值2 新建数组并初始化3 返回数组实现 func printNumbers(n int) []int { if n == 0 { return []int{} } max := 0 for i := 0; i &amp;lt; n; i++ { max *= 10 max += 9 } nums := make([]int,max) for i := 0; i &amp;lt; len(nums); i++ { nums[i] = i+1 } return nums } </description>
    </item>
    
    <item>
      <title>#1611[删除链表的节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1611/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1611/</guid>
      <description>题目 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 输入: head = [4,5,1,9], val = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.限制 思路 双指针实现碰到值相等的时候，将该值对应节点的父元素的下一个位置设置为当前节点的下一个位置。实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func deleteNode(head *ListNode, val int) *ListNode { //头为空  if head == nil { return head } //首元素的时候  if head.</description>
    </item>
    
    <item>
      <title>#1614[调整数组顺序使奇数位于偶数前面]</title>
      <link>https://cheene.github.io/posts/leet-code-1614/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1614/</guid>
      <description>题目 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。示例 输入：nums = [1,2,3,4]输出：[1,3,2,4] 注：[3,1,2,4] 也是正确的答案之一。限制 1 &amp;lt;= nums.length &amp;lt;= 500001 &amp;lt;= nums[i] &amp;lt;= 10000思路 双指针 P.Q保证P之前没有存在偶数即保存当前数组中第一个偶数的位置Q 向后遍历，碰到奇数的时候，查看前面是否有有偶数实现 func exchange(nums []int) []int { p := -1 for q := 0; q &amp;lt; len(nums); q++ { // 偶数，交换  if p == -1 &amp;amp;&amp;amp; nums[q] % 2 == 0 { // 第一次发现  p = q } else { // 奇数，交换  if p !</description>
    </item>
    
    <item>
      <title>#1615 [链表中倒数第k个节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1615/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1615/</guid>
      <description>题目 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点示例 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.返回链表 4-&amp;gt;5.限制 思路 设置一个队列每次更新队列的值实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func getKthFromEnd(head *ListNode, k int) *ListNode { if head == nil { return nil } queue := make([]*ListNode,k) for i := 0; i &amp;lt; k; i++ { queue[i] = head head = head.</description>
    </item>
    
    <item>
      <title>#1617 [合并两个排序的链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1617/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1617/</guid>
      <description>题目 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的示例 输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4限制 0 &amp;lt;= 链表长度 &amp;lt;= 1000思路 三个指针 P，Q,RP 为主线。QR 分别代表 L1，L2 每一次判断 QR 对应值的大小来确定主线的走势再返回 主线 P实现 func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { var p,q,r *ListNode if l1 == nil { return l2 } if l2 == nil { return l1 } q,r = l1,l2 if q.</description>
    </item>
    
    <item>
      <title>#1619[二叉树的镜像]</title>
      <link>https://cheene.github.io/posts/leet-code-1619/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1619/</guid>
      <description>题目 请完成一个函数，输入一个二叉树，该函数输出它的镜像。示例 例如输入：4/ \2 7/ \ / \1 3 6 9镜像输出：4/ \7 2/ \ / \9 6 3 1输入：root = [4,2,7,1,3,6,9]输出：[4,7,2,9,6,3,1]限制 0 &amp;lt;= 节点个数 &amp;lt;= 1000思路 需要交换左右子树的位置而不仅仅是元素判断当前节点的子树行为如果只有左子树右子树设置为左子树，左子树为空递归修改右子树如果只有右子树左子树设置为右子树，右子树为空递归修改左子树否则左右子树调换左右子树递归实现 func mirrorTree(root *TreeNode) *TreeNode { if root == nil { return root } /** 如果是空子树要注意 */ if root.</description>
    </item>
    
    <item>
      <title>#1620 [最小的k个数]</title>
      <link>https://cheene.github.io/posts/leet-code-1620/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1620/</guid>
      <description>题目 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。示例 输入：arr = [3,2,1], k = 2输出：[1,2] 或者 [2,1]限制 0 &amp;lt;= k &amp;lt;= arr.length &amp;lt;= 100000 &amp;lt;= arr[i] &amp;lt;= 10000思路 冒泡排序 或 选择排序 或 其他排序方式 k轮实现 func getLeastNumbers(arr []int, k int) []int { if arr == nil || len(arr) == 1{ return arr } for i := 0; i &amp;lt; k; i++ { min := i for j := i+1; j &amp;lt; len(arr); j++ { if arr[min] &amp;gt; arr[j] { min = j } } if min !</description>
    </item>
    
    <item>
      <title>Think Different</title>
      <link>https://cheene.github.io/thinks/</link>
      <pubDate>Sat, 06 Jun 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/thinks/</guid>
      <description>如果我们可以再进一步 本节主要保存对自己想法的收录，自 2020年6月6日立项。
ToDoList Doing Archived
 ToDoList  2020年6月6日 博客添加目录导航功能 本页面的修改 Go JSON 处理 图解HTTP 所见即所得 对于Golang，能够自主修改图标的格式 借助天猫精灵，修改传统的灯，使其能够达到声控的效果   Doing Archived  </description>
    </item>
    
    <item>
      <title>MySQL初始</title>
      <link>https://cheene.github.io/posts/mysqlbzbh-00/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlbzbh-00/</guid>
      <description>第一章 初始 1 数据库是什么? 数据库是一种容器，能够进行存储信息
那么类似于 MySQL 这样的不属于数据库，而是叫做DBMS，数据库管理软件。
表是什么？ 某种特定类型的结构化清单
 他是一个清单 其次该清单是天然持有携带格式的属性 单个清单的格式是特定的  模式（schema） 表示数据库与表的布局以及特性的信息
表中的行，列与数据类型  表中的每一行代表着一条记录 (row) 每一列代表着一个属性(column) 每一列有着具体的数据类型  表中的主键 主键是一列或一组列，其每行的记录用来作为唯一标识区别于其他的行
三个习惯
 不更新主键列中的值 不重用主键列的值 不在主键列中使用可能会改变的值  </description>
    </item>
    
    <item>
      <title>协议栈与网卡</title>
      <link>https://cheene.github.io/posts/how-computer-network-02/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-02/</guid>
      <description>第二章：协议栈与网卡 2.1 创建套接字   协议栈的内部结构由上到下
  应用程序(网络应用程序 Socket )；
  操作系统 协议栈 TCP、UDP、IP(ICMP,ARP))驱动程序(网卡驱动程序等)；
  硬件(网卡)
    一般收发时间比较短的用的是UDP连接比如DNS查询，视频流；需要稳定的是TCP来传输，比如邮件服务，web访问。
  IP 是用来控制网络包的收发状态，数据会切成一个一个的包。
 ICMP告知传输过程中产生的错误以及控制信息 ARP 用来根据IP地址获取对应的 MAC 地址    套接字： 通信的控制信息，比如在 windows 系统的 netstat -ano</description>
    </item>
    
    <item>
      <title>HTTP消息、DNS服务与协议栈消息发送</title>
      <link>https://cheene.github.io/posts/how-computer-network-01/</link>
      <pubDate>Mon, 11 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-01/</guid>
      <description>前言 网络是怎样连接的，来自于日本的一位作者，本书主要以web交互，从客户端访问服务器以及服务器应答的过程来讲解的。接下来一段时间将以书本上涉及知识的总结以供后期自行查阅。
网络连接的流程：
 浏览器委托数据的发送，传递消息的是搬运数字(消息对应着就是数据，数据是0和1组成的); 协议栈：给消息打包，添加地址等接着交给网卡最后通过电信号转发出去; 通过交换机到达路由器，路由器的后面就是互联网部分，接下来属于网络运营商所需要解决的; 由接入网到接入点(接入点后面是互联网的骨干部分) 到达web服务器大体需要经过  web 服务器所在的局域网 防火墙 缓存服务 WEB服务    1关于HTTP 1.1 HTTP 消息 ① 关于访问web服务器格式：用户名\密码\服务器域名\端口号\文件路径名；
② 端口是识别服务器中要连接服务的编号,即我与那个程序进行连接；
③ 省略默认文件很多比如 index.html 等；
④ 因为不能产生同名的文件/目录，所以在浏览的时候如果没有扩展名默认的先按目录来处理，目录找不到就按文件来查找，文件也查找不到就返回 404；
⑤ 基本思路
 客户端发送请求消息(URL 和 方法)到服务器; 服务器返回状态码到客户端  ⑥ 在消息体中，URL是域名的部分，方法是 post、get、delete、head、trace 等；</description>
    </item>
    
    <item>
      <title>Git基础</title>
      <link>https://cheene.github.io/posts/study-git/</link>
      <pubDate>Sun, 10 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/study-git/</guid>
      <description>Git 一 开始了解 Git 服务器并不是为了存储数据使用，而是为了方便大家来交换修改而设定。
1 Git 如何保证完整性？ 通过计算校验和利用 SHA-1
2 Git 三种状态  staged 已暂存：已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 modified 已修改：修改了文件，但还没有保存在数据库中。 committed 已提交： 数据已安全的保存在数据库里面。  3 Git 三个工作区  Git 仓库 工作目录 暂存区域  4 Git 工作三步曲  在工作目录里面修改文件 暂存文件，将文件的快照放入暂存区域 提交更新，从暂存区域存储到Git仓库目录  二 基础 1 初始化一个空白仓库 git init	// 新建仓库 git add file.</description>
    </item>
    
    <item>
      <title>About Author</title>
      <link>https://cheene.github.io/author/</link>
      <pubDate>Sun, 03 May 2020 02:07:31 +0600</pubDate>
      
      <guid>https://cheene.github.io/author/</guid>
      <description>I am CHENENE.</description>
    </item>
    
    <item>
      <title>Admin Panel</title>
      <link>https://cheene.github.io/admin/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/admin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Posts</title>
      <link>https://cheene.github.io/posts/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/posts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Sections</title>
      <link>https://cheene.github.io/sections/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/sections/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>