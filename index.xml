<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CHENENE</title>
    <link>https://cheene.github.io/</link>
    <description>Recent content on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <lastBuildDate>Sun, 07 Jun 2020 15:39:55 +0800</lastBuildDate>
    
	<atom:link href="https://cheene.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第三章 从网线到网络设备</title>
      <link>https://cheene.github.io/posts/how-computer-network-03/</link>
      <pubDate>Sun, 07 Jun 2020 15:39:55 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-03/</guid>
      <description>本章主要讲解的是电信号从 RJ-45 接口出来，到达集线器，交换机和路由器以及路由器往外转发的过程。在家庭的路由中，交换机和集线器一般集成在一起了或者直接没有集线器。
信号从网卡出来到集线器的时候   数据包之间的传输是独立的，仅仅负责传包并不会考虑内部的数据。
  从网卡到集线器的时候信号就会出现衰减，而且电信号频率越高，损失就越大。
  双绞线的存在是为了抑制噪声，减少衰减。 网线的周围的电磁波碰到金属等导体会产生电流，而信号本身就是带有电压变化的电流，混在一起容易导致失真。 电磁波有两种来源
 一种是外部的比如电机，荧光灯，CRT显示器等(让线变成螺旋状，使自身的电磁场变成螺旋状)； 一种是内部线之间出现泄露产生电磁波，称之为串扰。  抑制内部电磁波的方式是 让每一对信号线的扭交间隔产生差异。(正负信号的产生的噪声是相反的刚好抵消)。
  关于集线器：集线器的原理就是以太网的架构，数据传输的方式是靠着MAC地址寻找。
 集线器里有一个中继集成器，输入端口的信号转发给除了该端口之外的所有的端口。在这样的情况下如果所有的端口都发送信号，就会产生碰撞。 连接其他的端口叫做级联端口或者上行端口 根据相同的设备交叉连接，异种设备直连的原理，集线器里每一个端口都有一个 PHY/MAU 模块与其网卡上的模块没有什么区别，所以需要交叉连接。所谓的交叉连接就是发送方和接收方的交叉。 集线器中存在 MDI/MDI-X 切换开关。MDI 是直线连接，MDI-X是交叉连接。但现在的设备无所谓了，可以自适应。    交换机的包转发操作   交换机根据地址表进行转发 信号到达端口的时候由 PHY（MAU）来接收，然后传递给MAC模块，转换成数字信息并检验FCS确认无误后放在缓冲区中。 交换机端口本身没有MAC地址，实际过程中通过芯片同时控制多个端口 交换机电路的工作方式：</description>
    </item>
    
    <item>
      <title># 1616 [反转链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1616/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1616/</guid>
      <description>题目 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。示例 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL限制 0 &amp;lt;= 节点个数 &amp;lt;= 5000思路 指针类三个指针 pre cur next每次的反转next = cur.Nextcur.Next = prepre = curcur = next实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseList(head *ListNode) *ListNode { if head == nil || head.</description>
    </item>
    
    <item>
      <title>#1595 [数组中重复的数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1595/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1595/</guid>
      <description>题目 找出数组中重复的数字。在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。示例 输入：[2, 3, 1, 0, 2, 5, 3]输出：2 或 3 限制 2 &amp;lt;= n &amp;lt;= 100000思路 遍历数组到map中插入之后在查询其数量如果数量 &amp;gt; 1 就返回实现 func findRepeatNumber(nums []int) int { numMap := make(map[int]int,len(nums)) for _,num := range nums { numMap[num]++ if numMap[num] &amp;gt; 1 { return num } } return -1 } </description>
    </item>
    
    <item>
      <title>#1596 [二维数组中的查找]</title>
      <link>https://cheene.github.io/posts/leet-code-1596/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1596/</guid>
      <description>题目 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。示例 现有矩阵 matrix 如下：[[1, 4, 7, 11, 15],[2, 5, 8, 12, 19],[3, 6, 9, 16, 22],[10, 13, 14, 17, 24],[18, 21, 23, 26, 30]]给定 target = 5，返回 true。给定 target = 20，返回 false。限制 0 &amp;lt;= n &amp;lt;= 10000 &amp;lt;= m &amp;lt;= 1000思路 暴力破解实现 func findNumberIn2DArray(matrix [][]int, target int) bool { //边界条件  n := len(matrix) if n == 0 { return false } m := len(matrix[0]) if m == 0 { return false } //暴力破解  for i := 0; i &amp;lt; n; i++ { for j := 0; j &amp;lt; m; j++ { if matrix[i][j] == target { return true } } } return false } </description>
    </item>
    
    <item>
      <title>#1598 [从尾到头打印链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1598/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1598/</guid>
      <description>题目 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。示例 输入：head = [1,3,2]输出：[2,3,1]限制 0 &amp;lt;= 链表长度 &amp;lt;= 10000思路 核心在于不知道链表的元素的长度
如果使用栈的话，可以直接仅遍历一次，直接返回。
1 遍历链表到向量中再将向量的元素进行交换实现 func reversePrint(head *ListNode) []int { if head == nil { return []int{} } res := make([]int,0) for head != nil { res = append(res,head.</description>
    </item>
    
    <item>
      <title>#1603 [旋转数组的最小数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1603/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1603/</guid>
      <description>题目 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 示例 输入：[3,4,5,1,2]输出：1输入：[2,2,2,0,1]输出：0限制 思路 1 寻找第一个逆序对实现 func minArray(numbers []int) int { i := 0 j := len(numbers)-1 for i &amp;lt; j { mid := (i + j)/2 if numbers[mid] &amp;lt; numbers[j] { i = mid } else if numbers[mid] &amp;gt; numbers[j]{ j = mid + 1 } else { j -= 1 } } return numbers[i] } </description>
    </item>
    
    <item>
      <title>#1610 [打印从1到最大的n位数]</title>
      <link>https://cheene.github.io/posts/leet-code-1610/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1610/</guid>
      <description>题目 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。示例 输入: n = 1输出: [1,2,3,4,5,6,7,8,9]限制 思路 1 根据 n 得到最大值2 新建数组并初始化3 返回数组实现 func printNumbers(n int) []int { if n == 0 { return []int{} } max := 0 for i := 0; i &amp;lt; n; i++ { max *= 10 max += 9 } nums := make([]int,max) for i := 0; i &amp;lt; len(nums); i++ { nums[i] = i+1 } return nums } </description>
    </item>
    
    <item>
      <title>#1611[删除链表的节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1611/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1611/</guid>
      <description>题目 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 输入: head = [4,5,1,9], val = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.限制 思路 双指针实现碰到值相等的时候，将该值对应节点的父元素的下一个位置设置为当前节点的下一个位置。实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func deleteNode(head *ListNode, val int) *ListNode { //头为空  if head == nil { return head } //首元素的时候  if head.</description>
    </item>
    
    <item>
      <title>#1614[调整数组顺序使奇数位于偶数前面]</title>
      <link>https://cheene.github.io/posts/leet-code-1614/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1614/</guid>
      <description>题目 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。示例 输入：nums = [1,2,3,4]输出：[1,3,2,4] 注：[3,1,2,4] 也是正确的答案之一。限制 1 &amp;lt;= nums.length &amp;lt;= 500001 &amp;lt;= nums[i] &amp;lt;= 10000思路 双指针 P.Q保证P之前没有存在偶数即保存当前数组中第一个偶数的位置Q 向后遍历，碰到奇数的时候，查看前面是否有有偶数实现 func exchange(nums []int) []int { p := -1 for q := 0; q &amp;lt; len(nums); q++ { // 偶数，交换  if p == -1 &amp;amp;&amp;amp; nums[q] % 2 == 0 { // 第一次发现  p = q } else { // 奇数，交换  if p !</description>
    </item>
    
    <item>
      <title>#1615 [链表中倒数第k个节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1615/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1615/</guid>
      <description>题目 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点示例 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.返回链表 4-&amp;gt;5.限制 思路 设置一个队列每次更新队列的值实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func getKthFromEnd(head *ListNode, k int) *ListNode { if head == nil { return nil } queue := make([]*ListNode,k) for i := 0; i &amp;lt; k; i++ { queue[i] = head head = head.</description>
    </item>
    
    <item>
      <title>#1617 [合并两个排序的链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1617/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1617/</guid>
      <description>题目 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的示例 输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4限制 0 &amp;lt;= 链表长度 &amp;lt;= 1000思路 三个指针 P，Q,RP 为主线。QR 分别代表 L1，L2 每一次判断 QR 对应值的大小来确定主线的走势再返回 主线 P实现 func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { var p,q,r *ListNode if l1 == nil { return l2 } if l2 == nil { return l1 } q,r = l1,l2 if q.</description>
    </item>
    
    <item>
      <title>#1619[二叉树的镜像]</title>
      <link>https://cheene.github.io/posts/leet-code-1619/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1619/</guid>
      <description>题目 请完成一个函数，输入一个二叉树，该函数输出它的镜像。示例 例如输入：4/ \2 7/ \ / \1 3 6 9镜像输出：4/ \7 2/ \ / \9 6 3 1输入：root = [4,2,7,1,3,6,9]输出：[4,7,2,9,6,3,1]限制 0 &amp;lt;= 节点个数 &amp;lt;= 1000思路 需要交换左右子树的位置而不仅仅是元素判断当前节点的子树行为如果只有左子树右子树设置为左子树，左子树为空递归修改右子树如果只有右子树左子树设置为右子树，右子树为空递归修改左子树否则左右子树调换左右子树递归实现 func mirrorTree(root *TreeNode) *TreeNode { if root == nil { return root } /** 如果是空子树要注意 */ if root.</description>
    </item>
    
    <item>
      <title>#1620 [最小的k个数]</title>
      <link>https://cheene.github.io/posts/leet-code-1620/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1620/</guid>
      <description>题目 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。示例 输入：arr = [3,2,1], k = 2输出：[1,2] 或者 [2,1]限制 0 &amp;lt;= k &amp;lt;= arr.length &amp;lt;= 100000 &amp;lt;= arr[i] &amp;lt;= 10000思路 冒泡排序 或 选择排序 或 其他排序方式 k轮实现 func getLeastNumbers(arr []int, k int) []int { if arr == nil || len(arr) == 1{ return arr } for i := 0; i &amp;lt; k; i++ { min := i for j := i+1; j &amp;lt; len(arr); j++ { if arr[min] &amp;gt; arr[j] { min = j } } if min !</description>
    </item>
    
    <item>
      <title>Think Different</title>
      <link>https://cheene.github.io/thinks/</link>
      <pubDate>Sat, 06 Jun 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/thinks/</guid>
      <description>如果我们可以再进一步 本节主要保存对自己想法的收录，自 2020年6月6日立项。
ToDoList Doing Archived
 ToDoList  2020年6月6日 博客添加目录导航功能 本页面的修改 Go JSON 处理   Doing Archived  </description>
    </item>
    
    <item>
      <title>MySQL初始</title>
      <link>https://cheene.github.io/posts/mysqlbzbh-00/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlbzbh-00/</guid>
      <description>第一章 初始 1 数据库是什么? 数据库是一种容器，能够进行存储信息
那么类似于 MySQL 这样的不属于数据库，而是叫做DBMS，数据库管理软件。
表是什么？ 某种特定类型的结构化清单
 他是一个清单 其次该清单是天然持有携带格式的属性 单个清单的格式是特定的  模式（schema） 表示数据库与表的布局以及特性的信息
表中的行，列与数据类型  表中的每一行代表着一条记录 (row) 每一列代表着一个属性(column) 每一列有着具体的数据类型  表中的主键 主键是一列或一组列，其每行的记录用来作为唯一标识区别于其他的行
三个习惯
 不更新主键列中的值 不重用主键列的值 不在主键列中使用可能会改变的值  </description>
    </item>
    
    <item>
      <title>第二章：协议栈与网卡</title>
      <link>https://cheene.github.io/posts/how-computer-network-02/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-02/</guid>
      <description>第二章：协议栈与网卡 2.1 创建套接字   协议栈的内部结构由上到下
  应用程序(网络应用程序 Socket )；
  操作系统 协议栈 TCP、UDP、IP(ICMP,ARP))驱动程序(网卡驱动程序等)；
  硬件(网卡)
    一般收发时间比较短的用的是UDP连接比如DNS查询，视频流；需要稳定的是TCP来传输，比如邮件服务，web访问。
  IP 是用来控制网络包的收发状态，数据会切成一个一个的包。
 ICMP告知传输过程中产生的错误以及控制信息 ARP 用来根据IP地址获取对应的 MAC 地址    套接字： 通信的控制信息，比如在 windows 系统的 netstat -ano</description>
    </item>
    
    <item>
      <title>第一章 HTTP消息、DNS服务与协议栈消息发送</title>
      <link>https://cheene.github.io/posts/how-computer-network-01/</link>
      <pubDate>Mon, 11 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-01/</guid>
      <description>前言 网络是怎样连接的，来自于日本的一位作者，本书主要以web交互，从客户端访问服务器以及服务器应答的过程来讲解的。接下来一段时间将以书本上涉及知识的总结以供后期自行查阅。
网络连接的流程：
 浏览器委托数据的发送，传递消息的是搬运数字(消息对应着就是数据，数据是0和1组成的); 协议栈：给消息打包，添加地址等接着交给网卡最后通过电信号转发出去; 通过交换机到达路由器，路由器的后面就是互联网部分，接下来属于网络运营商所需要解决的; 由接入网到接入点(接入点后面是互联网的骨干部分) 到达web服务器大体需要经过  web 服务器所在的局域网 防火墙 缓存服务 WEB服务    1关于HTTP 1.1 HTTP 消息 ① 关于访问web服务器格式：用户名\密码\服务器域名\端口号\文件路径名；
② 端口是识别服务器中要连接服务的编号,即我与那个程序进行连接；
③ 省略默认文件很多比如 index.html 等；
④ 因为不能产生同名的文件/目录，所以在浏览的时候如果没有扩展名默认的先按目录来处理，目录找不到就按文件来查找，文件也查找不到就返回 404；
⑤ 基本思路
 客户端发送请求消息(URL 和 方法)到服务器; 服务器返回状态码到客户端  ⑥ 在消息体中，URL是域名的部分，方法是 post、get、delete、head、trace 等；</description>
    </item>
    
    <item>
      <title>Git基础</title>
      <link>https://cheene.github.io/posts/git/</link>
      <pubDate>Sun, 10 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/git/</guid>
      <description>Git 一 开始了解 Git 服务器并不是为了存储数据使用，而是为了方便大家来交换修改而设定。
1 Git 如何保证完整性？ 通过计算校验和利用 SHA-1
2 Git 三种状态  staged 已暂存：已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 modified 已修改：修改了文件，但还没有保存在数据库中。 committed 已提交： 数据已安全的保存在数据库里面。  3 Git 三个工作区  Git 仓库 工作目录 暂存区域  4 Git 工作三步曲  在工作目录里面修改文件 暂存文件，将文件的快照放入暂存区域 提交更新，从暂存区域存储到Git仓库目录  二 基础 1 初始化一个空白仓库 git init	// 新建仓库 git add file.</description>
    </item>
    
    <item>
      <title>About Author</title>
      <link>https://cheene.github.io/author/</link>
      <pubDate>Sun, 03 May 2020 02:07:31 +0600</pubDate>
      
      <guid>https://cheene.github.io/author/</guid>
      <description>I am CHENENE.</description>
    </item>
    
    <item>
      <title>Admin Panel</title>
      <link>https://cheene.github.io/admin/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/admin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Posts</title>
      <link>https://cheene.github.io/posts/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/posts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Sections</title>
      <link>https://cheene.github.io/sections/</link>
      <pubDate>Sun, 03 May 2020 02:07:30 +0600</pubDate>
      
      <guid>https://cheene.github.io/sections/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How Computer Network 03</title>
      <link>https://cheene.github.io/posts/how-computer-network-03/default/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/how-computer-network-03/default/</guid>
      <description>Article goes here.
For other options, put these in the front matter: description: &amp;ldquo;A description&amp;rdquo; other than the blog intro draft: true to not publish article yet showDate: true/false to enable/disable showing dates math: true to enable showing equations (katex) chordsheet: true to add chordsheet styelsheet</description>
    </item>
    
  </channel>
</rss>