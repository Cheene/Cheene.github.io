<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>链表 on CHENENE</title>
    <link>https://cheene.github.io/tags/%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 链表 on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    
	<atom:link href="https://cheene.github.io/tags/%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title># 1616 [反转链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1616/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1616/</guid>
      <description>题目 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。示例 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL限制 0 &amp;lt;= 节点个数 &amp;lt;= 5000思路 指针类三个指针 pre cur next每次的反转next = cur.Nextcur.Next = prepre = curcur = next实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseList(head *ListNode) *ListNode { if head == nil || head.</description>
    </item>
    
    <item>
      <title>#1598 [从尾到头打印链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1598/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1598/</guid>
      <description>题目 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。示例 输入：head = [1,3,2]输出：[2,3,1]限制 0 &amp;lt;= 链表长度 &amp;lt;= 10000思路 核心在于不知道链表的元素的长度
如果使用栈的话，可以直接仅遍历一次，直接返回。
1 遍历链表到向量中再将向量的元素进行交换实现 func reversePrint(head *ListNode) []int { if head == nil { return []int{} } res := make([]int,0) for head != nil { res = append(res,head.</description>
    </item>
    
    <item>
      <title>#1611[删除链表的节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1611/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1611/</guid>
      <description>题目 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 输入: head = [4,5,1,9], val = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.限制 思路 双指针实现碰到值相等的时候，将该值对应节点的父元素的下一个位置设置为当前节点的下一个位置。实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func deleteNode(head *ListNode, val int) *ListNode { //头为空  if head == nil { return head } //首元素的时候  if head.</description>
    </item>
    
    <item>
      <title>#1615 [链表中倒数第k个节点]</title>
      <link>https://cheene.github.io/posts/leet-code-1615/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1615/</guid>
      <description>题目 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点示例 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.返回链表 4-&amp;gt;5.限制 思路 设置一个队列每次更新队列的值实现 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func getKthFromEnd(head *ListNode, k int) *ListNode { if head == nil { return nil } queue := make([]*ListNode,k) for i := 0; i &amp;lt; k; i++ { queue[i] = head head = head.</description>
    </item>
    
    <item>
      <title>#1617 [合并两个排序的链表]</title>
      <link>https://cheene.github.io/posts/leet-code-1617/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1617/</guid>
      <description>题目 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的示例 输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4限制 0 &amp;lt;= 链表长度 &amp;lt;= 1000思路 三个指针 P，Q,RP 为主线。QR 分别代表 L1，L2 每一次判断 QR 对应值的大小来确定主线的走势再返回 主线 P实现 func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { var p,q,r *ListNode if l1 == nil { return l2 } if l2 == nil { return l1 } q,r = l1,l2 if q.</description>
    </item>
    
  </channel>
</rss>