<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 on CHENENE</title>
    <link>https://cheene.github.io/tags/%E6%95%B0%E7%BB%84/</link>
    <description>Recent content in 数组 on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <lastBuildDate>Sun, 07 Jun 2020 12:28:04 +0800</lastBuildDate>
    
	<atom:link href="https://cheene.github.io/tags/%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#1595 [数组中重复的数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1595/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1595/</guid>
      <description>题目 找出数组中重复的数字。在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。示例 输入：[2, 3, 1, 0, 2, 5, 3]输出：2 或 3 限制 2 &amp;lt;= n &amp;lt;= 100000思路 遍历数组到map中插入之后在查询其数量如果数量 &amp;gt; 1 就返回实现 func findRepeatNumber(nums []int) int { numMap := make(map[int]int,len(nums)) for _,num := range nums { numMap[num]++ if numMap[num] &amp;gt; 1 { return num } } return -1 } </description>
    </item>
    
    <item>
      <title>#1596 [二维数组中的查找]</title>
      <link>https://cheene.github.io/posts/leet-code-1596/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1596/</guid>
      <description>题目 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。示例 现有矩阵 matrix 如下：[[1, 4, 7, 11, 15],[2, 5, 8, 12, 19],[3, 6, 9, 16, 22],[10, 13, 14, 17, 24],[18, 21, 23, 26, 30]]给定 target = 5，返回 true。给定 target = 20，返回 false。限制 0 &amp;lt;= n &amp;lt;= 10000 &amp;lt;= m &amp;lt;= 1000思路 暴力破解实现 func findNumberIn2DArray(matrix [][]int, target int) bool { //边界条件  n := len(matrix) if n == 0 { return false } m := len(matrix[0]) if m == 0 { return false } //暴力破解  for i := 0; i &amp;lt; n; i++ { for j := 0; j &amp;lt; m; j++ { if matrix[i][j] == target { return true } } } return false } </description>
    </item>
    
    <item>
      <title>#1603 [旋转数组的最小数字]</title>
      <link>https://cheene.github.io/posts/leet-code-1603/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1603/</guid>
      <description>题目 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 示例 输入：[3,4,5,1,2]输出：1输入：[2,2,2,0,1]输出：0限制 思路 1 寻找第一个逆序对实现 func minArray(numbers []int) int { i := 0 j := len(numbers)-1 for i &amp;lt; j { mid := (i + j)/2 if numbers[mid] &amp;lt; numbers[j] { i = mid } else if numbers[mid] &amp;gt; numbers[j]{ j = mid + 1 } else { j -= 1 } } return numbers[i] } </description>
    </item>
    
    <item>
      <title>#1610 [打印从1到最大的n位数]</title>
      <link>https://cheene.github.io/posts/leet-code-1610/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1610/</guid>
      <description>题目 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。示例 输入: n = 1输出: [1,2,3,4,5,6,7,8,9]限制 思路 1 根据 n 得到最大值2 新建数组并初始化3 返回数组实现 func printNumbers(n int) []int { if n == 0 { return []int{} } max := 0 for i := 0; i &amp;lt; n; i++ { max *= 10 max += 9 } nums := make([]int,max) for i := 0; i &amp;lt; len(nums); i++ { nums[i] = i+1 } return nums } </description>
    </item>
    
    <item>
      <title>#1614[调整数组顺序使奇数位于偶数前面]</title>
      <link>https://cheene.github.io/posts/leet-code-1614/</link>
      <pubDate>Sun, 07 Jun 2020 12:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/leet-code-1614/</guid>
      <description>题目 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。示例 输入：nums = [1,2,3,4]输出：[1,3,2,4] 注：[3,1,2,4] 也是正确的答案之一。限制 1 &amp;lt;= nums.length &amp;lt;= 500001 &amp;lt;= nums[i] &amp;lt;= 10000思路 双指针 P.Q保证P之前没有存在偶数即保存当前数组中第一个偶数的位置Q 向后遍历，碰到奇数的时候，查看前面是否有有偶数实现 func exchange(nums []int) []int { p := -1 for q := 0; q &amp;lt; len(nums); q++ { // 偶数，交换  if p == -1 &amp;amp;&amp;amp; nums[q] % 2 == 0 { // 第一次发现  p = q } else { // 奇数，交换  if p !</description>
    </item>
    
  </channel>
</rss>