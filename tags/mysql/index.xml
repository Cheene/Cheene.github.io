<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on CHENENE</title>
    <link>https://cheene.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on CHENENE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH-CN</language>
    <lastBuildDate>Thu, 18 Jun 2020 22:31:51 +0800</lastBuildDate>
    
	<atom:link href="https://cheene.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql本地数据恢复--在没有密码的情况下</title>
      <link>https://cheene.github.io/posts/mysql-recover-byfrm/</link>
      <pubDate>Thu, 18 Jun 2020 22:31:51 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysql-recover-byfrm/</guid>
      <description>  删除源表
  借助MySQL Utilities查询表的结构并创建表
mysqlfrm --diagnostic ./文件目录/t1.frm   表空间卸载卸载
alter table t1 discard tablespace;   重新拷贝原 idb
  对表进行空间装载
   alter table t1 import tablespace; </description>
    </item>
    
    <item>
      <title>MySQL一条查询语句是如何执行的？</title>
      <link>https://cheene.github.io/posts/mysqlsz-00/</link>
      <pubDate>Sun, 14 Jun 2020 16:57:52 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlsz-00/</guid>
      <description>MySQL一条查询语句是如何执行的？ 首先要看到整个MySQL系统划分为哪一些部分？
  客户端
 各种发送请求    服务端
  Server层
 连接器 分析器 优化器 执行器    查询缓存(可能会逐步替代)
    引擎层
 各种存储引擎    执行的逻辑是什么？
 客户端向数据库发送请求 数据库收到请求后找到连接器，进行初步权限认证 分析器先进行词法和语法分析  词法分析，识别输入的是什么。比如表名？列名？关键字？ 语法分析，判断SQL语句是否符合语法   再执行优化器，优化主要在两个方面来体现  多个索引的时候，如何选择合适的索引 一个语句多表关联时如何处理   到达执行器，会进一步对语句做权限认证，同时根据存储引擎的定义来调用存储引擎的接口  查询缓存在哪里使用</description>
    </item>
    
    <item>
      <title>MySQL初始</title>
      <link>https://cheene.github.io/posts/mysqlbzbh-00/</link>
      <pubDate>Tue, 12 May 2020 20:28:04 +0800</pubDate>
      
      <guid>https://cheene.github.io/posts/mysqlbzbh-00/</guid>
      <description>第一章 初始 1 数据库是什么? 数据库是一种容器，能够进行存储信息
那么类似于 MySQL 这样的不属于数据库，而是叫做DBMS，数据库管理软件。
表是什么？ 某种特定类型的结构化清单
 他是一个清单 其次该清单是天然持有携带格式的属性 单个清单的格式是特定的  模式（schema） 表示数据库与表的布局以及特性的信息
表中的行，列与数据类型  表中的每一行代表着一条记录 (row) 每一列代表着一个属性(column) 每一列有着具体的数据类型  表中的主键 主键是一列或一组列，其每行的记录用来作为唯一标识区别于其他的行
三个习惯
 不更新主键列中的值 不重用主键列的值 不在主键列中使用可能会改变的值  </description>
    </item>
    
  </channel>
</rss>